name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每周一凌晨2点运行
    - cron: '0 2 * * 1'

jobs:
  # 代码分析
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run Prettier check
      run: npm run format:check
      
    - name: Run TypeScript type check
      run: npm run type-check
      
    - name: Run SonarQube analysis
      uses: sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        scannerHomebrew: SonarScanner
        args: >
          -Dsonar.projectKey=${{ github.repository }}
          -Dsonar.sources=src
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}

  # 测试覆盖率
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        
    - name: Comment PR with coverage
      uses: romeovs/lcov-reporter-action@v0.3.1
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info

  # 依赖检查
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check for outdated dependencies
      run: npm outdated
      
    - name: Audit dependencies
      run: npm audit --audit-level moderate
      
    - name: Check for license compliance
      run: npm run license-check
      
    - name: Generate dependency graph
      run: npm run deps:graph

  # 性能测试
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: Run bundle analyzer
      run: npm run build:analyze
      
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis
        path: dist/bundle-analysis.html
        retention-days: 30

  # 安全检查
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-report.json
        
    - name: Upload Snyk results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: snyk-results
        path: snyk-report.json
        retention-days: 30
        
    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Upload ZAP results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-results
        path: zap-report.html
        retention-days: 30

  # 代码质量报告
  quality-report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    needs: [code-analysis, test-coverage, dependency-check, security-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Generate quality report
      run: |
        echo "# Code Quality Report" > quality-report.md
        echo "Generated on: $(date)" >> quality-report.md
        echo "" >> quality-report.md
        echo "## Summary" >> quality-report.md
        echo "- Code Analysis: ${{ needs.code-analysis.result }}" >> quality-report.md
        echo "- Test Coverage: ${{ needs.test-coverage.result }}" >> quality-report.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> quality-report.md
        echo "- Security Check: ${{ needs.security-check.result }}" >> quality-report.md
        
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report
        path: quality-report.md
        retention-days: 90
        
    - name: Comment PR with quality report
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          }); 